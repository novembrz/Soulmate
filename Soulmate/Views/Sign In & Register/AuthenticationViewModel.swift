//
//  AuthenticationViewModel.swift
//  Soulmate
//
//  Created by dasha on 17.01.2022.
//

import Foundation
import SwiftUI
import LocalAuthentication


final class AuthenticationViewModel: ObservableObject {
    
    enum AuthenticationType {
        case register, signIn
    }
    
    @Published var login: String = ""
    @Published var email: String = ""
    @Published var password: String = ""
    @Published var confirmPassword: String = ""
    @Published var authenticationType: AuthenticationType = .signIn
    
    @Published var isLoading = false
    @Published var isSignInSuccses = false
    @Published var isErrorAuth = false
    @Published var errorText: String?
    
    @Published var forgotPassword = false
    
    var descriptionText: String { authenticationType == .signIn ? "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?" : "–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?" }
    var switchButtonText: String { authenticationType == .signIn ? "–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" : "–í–æ–π—Ç–∏" }
    var authButtonText: String { authenticationType == .signIn ? "–í–æ–π—Ç–∏" : "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" }
    var forgorPasswordMessage = "–ù–∞ –í–∞—à—É –ø–æ—á—Ç—É –≤—ã—Å–ª–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è!"

    
    //MARK: - Auth
    
    func authentication() {
        switch authenticationType {
        case .register:
            registerValidation()
        case .signIn:
            signInValidation()
        }
    }
    
    
    //MARK: - SignIn
    
    private func signInValidation() {
        Validators.canSignIn(login: login, password: password) { result in
            switch result {
            case .success:
                self.signIn()
            case .failure(let authError):
                self.errorText = authError.errorDescription
                self.isErrorAuth = true
            }
        }
    }
    
    private func signIn() {
        isLoading = true
        AuthFetcherServices.signIn(login: login, password: password) { result in
            DispatchQueue.main.async {
                switch result {
                case .success:
                    self.successAuth()
                case .failure(let authError):
                    self.failureAuth(authError)
                }
            }
        }
    }
    
    
    //MARK: - Register
    
    private func registerValidation() {
        Validators.canRegister(login: login, email: email, password: password, confirmPassword: confirmPassword) { result in
            switch result {
            case .success:
                self.register()
            case .failure(let authError):
                self.errorText = authError.errorDescription
                self.isErrorAuth = true
            }
        }
    }
    
    private func register() {
        isLoading = true
        print("üêù", password)
        AuthFetcherServices.register(login: login, email: email, password: password) { result in
            DispatchQueue.main.async {
                switch result {
                case .success:
                    let credentials = Credentials(username: self.login, password: self.password)
                    KeychainService.standard.save(credentials, account: credentials.username)
                    self.successAuth()
                case .failure(let authError):
                    self.failureAuth(authError)
                }
            }
        }
    }
    
    
    //MARK: - Auth Result
    
    private func successAuth() {
        if let readData = KeychainService.standard.read(account: "access-token", type: AuthToken.self) {
            print("üîë", readData)
        }
        
        self.isLoading = false
        self.isSignInSuccses = true //- for Routing
    }
    
    private func failureAuth(_ authError: AuthError) {
        self.errorText = authError.errorDescription
        self.isLoading = false
        self.isErrorAuth = true
    }
    
    
    //MARK: - Biometric
    
    //–ù–ê–î–û –õ–ò
//    func getBiometricType() -> String {
//        let context = LAContext()
//        _ = context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: nil)
//
//        switch context.biometryType {
//        case .faceID:
//            return "faceid"
//        case .touchID:
//            return "lock"
//        case .none:
//            return "lock"
//        @unknown default:
//            return "lock"
//        }
//    }
//
//    func tryBiometricAuthentication() {
//        let context = LAContext() //–ø–æ–ª—É—á–∞–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
//        var error: NSError?
//
//        //–ø—Ä–æ–≤–µ—Ä—è–µ—Ç–µ, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
//        if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) {
//            let reason = "Authenticate to unlock your note." //–ø—Ä–∏—á–∏–Ω–∞
//            context.evaluatePolicy(.deviceOwnerAuthentication, localizedReason: reason) { authenticated, error in
//
//                DispatchQueue.main.async {
//                    if authenticated {
//                        self.isSignInSuccses = true //–∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å, –∏–¥–∏ –¥–∞–ª—å—à–µ
//                    } else {
//                        if let errorString = error?.localizedDescription {
//                            print("Error in biometric policy evaluation: \(errorString)")
//                        }
//                        //MARK: ERROR
//                    }
//                }
//            }
//        } else { //–≤–æ–æ–±—â–µ –∞—É—Ç–µ–Ω—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞
//            if let errorString = error?.localizedDescription {
//                print("Error in biometric policy evaluation: \(errorString)")
//            }
//            //MARK: ERROR
//        }
//    }
}
